
Lab1_sw_3.elf:     file format elf32-littlenios2
Lab1_sw_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000bec memsz 0x00000bec flags r-x
    LOAD off    0x00001c0c vaddr 0x00004c0c paddr 0x000051f8 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000027e4 vaddr 0x000057e4 paddr 0x000057e4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000021f8  2**0
                  CONTENTS
  2 .text         00000bdc  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00004bfc  00004bfc  00001bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  00004c0c  000051f8  00001c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000057e4  000057e4  000027e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000057f4  000057f4  000021f8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000310  00000000  00000000  00002220  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003e8f  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001372  00000000  00000000  000063bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000146f  00000000  00000000  00007731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004cc  00000000  00000000  00008ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fad  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008fe  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000a918  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  0000a958  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bbf6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0000bbf9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bc01  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bc02  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000bc03  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000bc07  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000bc0b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0000bc0f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0000bc18  2**0
                  CONTENTS, READONLY
 26 .jdi          000001e9  00000000  00000000  0000bc4c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002d7fc  00000000  00000000  0000be35  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004bfc l    d  .rodata	00000000 .rodata
00004c0c l    d  .rwdata	00000000 .rwdata
000057e4 l    d  .bss	00000000 .bss
000057f4 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab1_sw_3_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Lab1_source.c
00000000 l    df *ABS*	00000000 alt_load.c
000040f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00004420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004554 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00004db4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000041e0 g     F .text	00000060 alt_main
000051f8 g       *ABS*	00000000 __flash_rwdata_start
000046e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000057f0 g     O .bss	00000004 errno
000057e8 g     O .bss	00000004 alt_argv
0000d1d8 g       *ABS*	00000000 _gp
00004240 g     F .text	00000030 usleep
00004c34 g     O .rwdata	00000180 alt_fd_list
00004bfc g       *ABS*	00000000 __DTOR_END__
00004ae4 g     F .text	00000064 .hidden __udivsi3
000051e8 g     O .rwdata	00000004 alt_max_fd
000051f0 g     O .rwdata	00000004 _global_impure_ptr
000057f4 g       *ABS*	00000000 __bss_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_mem
00004c0c g     O .rwdata	00000028 alt_dev_null
00004534 g     F .text	00000020 alt_dcache_flush_all
000051f8 g       *ABS*	00000000 __ram_rwdata_end
000051e0 g     O .rwdata	00000008 alt_dev_list
00004c0c g       *ABS*	00000000 __ram_rodata_end
00004b48 g     F .text	00000058 .hidden __umodsi3
000057f4 g       *ABS*	00000000 end
00004bfc g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000486c g     F .text	00000180 __call_exitprocs
00004020 g     F .text	0000003c _start
000042a8 g     F .text	00000020 alt_sys_init
00004754 g     F .text	00000118 __register_exitproc
00004ba0 g     F .text	00000028 .hidden __mulsi3
00004c0c g       *ABS*	00000000 __ram_rwdata_start
00004bfc g       *ABS*	00000000 __ram_rodata_start
000042c8 g     F .text	00000158 alt_busy_sleep
000057f4 g       *ABS*	00000000 __alt_stack_base
000057e4 g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000098 main
000057ec g     O .bss	00000004 alt_envp
000051ec g     O .rwdata	00000004 alt_errno
000049ec g     F .text	00000084 .hidden __divsi3
00004bfc g       *ABS*	00000000 __CTOR_END__
00004bfc g       *ABS*	00000000 __flash_rodata_start
00004bfc g       *ABS*	00000000 __DTOR_LIST__
00004270 g     F .text	00000038 alt_irq_init
00004660 g     F .text	00000084 alt_release_fd
00004708 g     F .text	00000014 atexit
000051f4 g     O .rwdata	00000004 _impure_ptr
000057e4 g     O .bss	00000004 alt_argc
000045e0 g     F .text	00000060 _do_dtors
000051d8 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000051f8 g       *ABS*	00000000 _edata
000057f4 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
0000471c g     F .text	00000038 exit
00004a70 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004bc8 g     F .text	00000034 _exit
00004640 g     F .text	00000020 alt_icache_flush_all
00004580 g     F .text	00000060 _do_ctors
0000445c g     F .text	000000d8 close
0000415c g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b47614 	ori	gp,gp,53720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1095f914 	ori	r2,r2,22500

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d5fd14 	ori	r3,r3,22516

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff6e6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000415c0 	call	415c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041e00 	call	41e0 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff6e80>

0000405c <main>:
#include <unistd.h>

int main(void) {
    405c:	defffb04 	addi	sp,sp,-20
    4060:	dfc00415 	stw	ra,16(sp)
    4064:	df000315 	stw	fp,12(sp)
    4068:	df000304 	addi	fp,sp,12
	char *psw = (char*) 0x8000;
    406c:	00a00014 	movui	r2,32768
    4070:	e0bffe15 	stw	r2,-8(fp)
	char *pled = (char*) 0x8010;
    4074:	00a00414 	movui	r2,32784
    4078:	e0bfff15 	stw	r2,-4(fp)
	char count = 64;
    407c:	00801004 	movi	r2,64
    4080:	e0bffd05 	stb	r2,-12(fp)

	while (1) {
		usleep(300000);
    4084:	01000174 	movhi	r4,5
    4088:	2124f804 	addi	r4,r4,-27680
    408c:	00042400 	call	4240 <usleep>

		if (((*psw) != 0x00) && (((*psw) - 1) > count))
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10800003 	ldbu	r2,0(r2)
    4098:	10803fcc 	andi	r2,r2,255
    409c:	1080201c 	xori	r2,r2,128
    40a0:	10bfe004 	addi	r2,r2,-128
    40a4:	10000c26 	beq	r2,zero,40d8 <main+0x7c>
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10800003 	ldbu	r2,0(r2)
    40b0:	10803fcc 	andi	r2,r2,255
    40b4:	1080201c 	xori	r2,r2,128
    40b8:	10bfe004 	addi	r2,r2,-128
    40bc:	10bfffc4 	addi	r2,r2,-1
    40c0:	e0fffd07 	ldb	r3,-12(fp)
    40c4:	1880040e 	bge	r3,r2,40d8 <main+0x7c>
			count++; /* Continue 0-SW[7:0] counting loop. */
    40c8:	e0bffd03 	ldbu	r2,-12(fp)
    40cc:	10800044 	addi	r2,r2,1
    40d0:	e0bffd05 	stb	r2,-12(fp)
    40d4:	00000106 	br	40dc <main+0x80>
		else
			count = 0; /* start counting loop from 0 */
    40d8:	e03ffd05 	stb	zero,-12(fp)

		*pled = ~count;
    40dc:	e0bffd03 	ldbu	r2,-12(fp)
    40e0:	0084303a 	nor	r2,zero,r2
    40e4:	1007883a 	mov	r3,r2
    40e8:	e0bfff17 	ldw	r2,-4(fp)
    40ec:	10c00005 	stb	r3,0(r2)
	}
    40f0:	003fe406 	br	4084 <_gp+0xffff6eac>

000040f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    40f4:	defffc04 	addi	sp,sp,-16
    40f8:	df000315 	stw	fp,12(sp)
    40fc:	df000304 	addi	fp,sp,12
    4100:	e13ffd15 	stw	r4,-12(fp)
    4104:	e17ffe15 	stw	r5,-8(fp)
    4108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    410c:	e0fffe17 	ldw	r3,-8(fp)
    4110:	e0bffd17 	ldw	r2,-12(fp)
    4114:	18800c26 	beq	r3,r2,4148 <alt_load_section+0x54>
  {
    while( to != end )
    4118:	00000806 	br	413c <alt_load_section+0x48>
    {
      *to++ = *from++;
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00104 	addi	r3,r2,4
    4124:	e0fffe15 	stw	r3,-8(fp)
    4128:	e0fffd17 	ldw	r3,-12(fp)
    412c:	19000104 	addi	r4,r3,4
    4130:	e13ffd15 	stw	r4,-12(fp)
    4134:	18c00017 	ldw	r3,0(r3)
    4138:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    413c:	e0fffe17 	ldw	r3,-8(fp)
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	18bff51e 	bne	r3,r2,411c <_gp+0xffff6f44>
    {
      *to++ = *from++;
    }
  }
}
    4148:	0001883a 	nop
    414c:	e037883a 	mov	sp,fp
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00104 	addi	sp,sp,4
    4158:	f800283a 	ret

0000415c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    415c:	defffe04 	addi	sp,sp,-8
    4160:	dfc00115 	stw	ra,4(sp)
    4164:	df000015 	stw	fp,0(sp)
    4168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    416c:	01800034 	movhi	r6,0
    4170:	31947e04 	addi	r6,r6,20984
    4174:	01400034 	movhi	r5,0
    4178:	29530304 	addi	r5,r5,19468
    417c:	01000034 	movhi	r4,0
    4180:	21147e04 	addi	r4,r4,20984
    4184:	00040f40 	call	40f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4188:	01800034 	movhi	r6,0
    418c:	31900804 	addi	r6,r6,16416
    4190:	01400034 	movhi	r5,0
    4194:	29500804 	addi	r5,r5,16416
    4198:	01000034 	movhi	r4,0
    419c:	21100804 	addi	r4,r4,16416
    41a0:	00040f40 	call	40f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    41a4:	01800034 	movhi	r6,0
    41a8:	31930304 	addi	r6,r6,19468
    41ac:	01400034 	movhi	r5,0
    41b0:	2952ff04 	addi	r5,r5,19452
    41b4:	01000034 	movhi	r4,0
    41b8:	2112ff04 	addi	r4,r4,19452
    41bc:	00040f40 	call	40f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    41c0:	00045340 	call	4534 <alt_dcache_flush_all>
  alt_icache_flush_all();
    41c4:	00046400 	call	4640 <alt_icache_flush_all>
}
    41c8:	0001883a 	nop
    41cc:	e037883a 	mov	sp,fp
    41d0:	dfc00117 	ldw	ra,4(sp)
    41d4:	df000017 	ldw	fp,0(sp)
    41d8:	dec00204 	addi	sp,sp,8
    41dc:	f800283a 	ret

000041e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41e0:	defffd04 	addi	sp,sp,-12
    41e4:	dfc00215 	stw	ra,8(sp)
    41e8:	df000115 	stw	fp,4(sp)
    41ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41f0:	0009883a 	mov	r4,zero
    41f4:	00042700 	call	4270 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    41f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    41fc:	00042a80 	call	42a8 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4200:	00045800 	call	4580 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4204:	01000034 	movhi	r4,0
    4208:	21117804 	addi	r4,r4,17888
    420c:	00047080 	call	4708 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4210:	d0a18317 	ldw	r2,-31220(gp)
    4214:	d0e18417 	ldw	r3,-31216(gp)
    4218:	d1218517 	ldw	r4,-31212(gp)
    421c:	200d883a 	mov	r6,r4
    4220:	180b883a 	mov	r5,r3
    4224:	1009883a 	mov	r4,r2
    4228:	000405c0 	call	405c <main>
    422c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4230:	01000044 	movi	r4,1
    4234:	000445c0 	call	445c <close>
  exit (result);
    4238:	e13fff17 	ldw	r4,-4(fp)
    423c:	000471c0 	call	471c <exit>

00004240 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    4240:	defffd04 	addi	sp,sp,-12
    4244:	dfc00215 	stw	ra,8(sp)
    4248:	df000115 	stw	fp,4(sp)
    424c:	df000104 	addi	fp,sp,4
    4250:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    4254:	e13fff17 	ldw	r4,-4(fp)
    4258:	00042c80 	call	42c8 <alt_busy_sleep>
}
    425c:	e037883a 	mov	sp,fp
    4260:	dfc00117 	ldw	ra,4(sp)
    4264:	df000017 	ldw	fp,0(sp)
    4268:	dec00204 	addi	sp,sp,8
    426c:	f800283a 	ret

00004270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4270:	defffd04 	addi	sp,sp,-12
    4274:	dfc00215 	stw	ra,8(sp)
    4278:	df000115 	stw	fp,4(sp)
    427c:	df000104 	addi	fp,sp,4
    4280:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PD, nios2_PD);
    4284:	00046e40 	call	46e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4288:	00800044 	movi	r2,1
    428c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4290:	0001883a 	nop
    4294:	e037883a 	mov	sp,fp
    4298:	dfc00117 	ldw	ra,4(sp)
    429c:	df000017 	ldw	fp,0(sp)
    42a0:	dec00204 	addi	sp,sp,8
    42a4:	f800283a 	ret

000042a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    42a8:	deffff04 	addi	sp,sp,-4
    42ac:	df000015 	stw	fp,0(sp)
    42b0:	d839883a 	mov	fp,sp
}
    42b4:	0001883a 	nop
    42b8:	e037883a 	mov	sp,fp
    42bc:	df000017 	ldw	fp,0(sp)
    42c0:	dec00104 	addi	sp,sp,4
    42c4:	f800283a 	ret

000042c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    42c8:	defffa04 	addi	sp,sp,-24
    42cc:	dfc00515 	stw	ra,20(sp)
    42d0:	df000415 	stw	fp,16(sp)
    42d4:	df000404 	addi	fp,sp,16
    42d8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    42dc:	00800244 	movi	r2,9
    42e0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    42e4:	014003f4 	movhi	r5,15
    42e8:	29509004 	addi	r5,r5,16960
    42ec:	e13ffd17 	ldw	r4,-12(fp)
    42f0:	0004ba00 	call	4ba0 <__mulsi3>
    42f4:	100b883a 	mov	r5,r2
    42f8:	01005f74 	movhi	r4,381
    42fc:	211e1004 	addi	r4,r4,30784
    4300:	0004ae40 	call	4ae4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4304:	100b883a 	mov	r5,r2
    4308:	01200034 	movhi	r4,32768
    430c:	213fffc4 	addi	r4,r4,-1
    4310:	0004ae40 	call	4ae4 <__udivsi3>
    4314:	100b883a 	mov	r5,r2
    4318:	e13fff17 	ldw	r4,-4(fp)
    431c:	0004ae40 	call	4ae4 <__udivsi3>
    4320:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4324:	e0bffe17 	ldw	r2,-8(fp)
    4328:	10002a26 	beq	r2,zero,43d4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    432c:	e03ffc15 	stw	zero,-16(fp)
    4330:	00001706 	br	4390 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4334:	00a00034 	movhi	r2,32768
    4338:	10bfffc4 	addi	r2,r2,-1
    433c:	10bfffc4 	addi	r2,r2,-1
    4340:	103ffe1e 	bne	r2,zero,433c <_gp+0xffff7164>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    4344:	014003f4 	movhi	r5,15
    4348:	29509004 	addi	r5,r5,16960
    434c:	e13ffd17 	ldw	r4,-12(fp)
    4350:	0004ba00 	call	4ba0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4354:	100b883a 	mov	r5,r2
    4358:	01005f74 	movhi	r4,381
    435c:	211e1004 	addi	r4,r4,30784
    4360:	0004ae40 	call	4ae4 <__udivsi3>
    4364:	100b883a 	mov	r5,r2
    4368:	01200034 	movhi	r4,32768
    436c:	213fffc4 	addi	r4,r4,-1
    4370:	0004ae40 	call	4ae4 <__udivsi3>
    4374:	1007883a 	mov	r3,r2
    4378:	e0bfff17 	ldw	r2,-4(fp)
    437c:	10c5c83a 	sub	r2,r2,r3
    4380:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4384:	e0bffc17 	ldw	r2,-16(fp)
    4388:	10800044 	addi	r2,r2,1
    438c:	e0bffc15 	stw	r2,-16(fp)
    4390:	e0fffc17 	ldw	r3,-16(fp)
    4394:	e0bffe17 	ldw	r2,-8(fp)
    4398:	18bfe616 	blt	r3,r2,4334 <_gp+0xffff715c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    439c:	014003f4 	movhi	r5,15
    43a0:	29509004 	addi	r5,r5,16960
    43a4:	e13ffd17 	ldw	r4,-12(fp)
    43a8:	0004ba00 	call	4ba0 <__mulsi3>
    43ac:	100b883a 	mov	r5,r2
    43b0:	01005f74 	movhi	r4,381
    43b4:	211e1004 	addi	r4,r4,30784
    43b8:	0004ae40 	call	4ae4 <__udivsi3>
    43bc:	e17fff17 	ldw	r5,-4(fp)
    43c0:	1009883a 	mov	r4,r2
    43c4:	0004ba00 	call	4ba0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    43c8:	10bfffc4 	addi	r2,r2,-1
    43cc:	103ffe1e 	bne	r2,zero,43c8 <_gp+0xffff71f0>
    43d0:	00000d06 	br	4408 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    43d4:	014003f4 	movhi	r5,15
    43d8:	29509004 	addi	r5,r5,16960
    43dc:	e13ffd17 	ldw	r4,-12(fp)
    43e0:	0004ba00 	call	4ba0 <__mulsi3>
    43e4:	100b883a 	mov	r5,r2
    43e8:	01005f74 	movhi	r4,381
    43ec:	211e1004 	addi	r4,r4,30784
    43f0:	0004ae40 	call	4ae4 <__udivsi3>
    43f4:	e17fff17 	ldw	r5,-4(fp)
    43f8:	1009883a 	mov	r4,r2
    43fc:	0004ba00 	call	4ba0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4400:	10bfffc4 	addi	r2,r2,-1
    4404:	00bffe16 	blt	zero,r2,4400 <_gp+0xffff7228>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    4408:	0005883a 	mov	r2,zero
}
    440c:	e037883a 	mov	sp,fp
    4410:	dfc00117 	ldw	ra,4(sp)
    4414:	df000017 	ldw	fp,0(sp)
    4418:	dec00204 	addi	sp,sp,8
    441c:	f800283a 	ret

00004420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4420:	defffe04 	addi	sp,sp,-8
    4424:	dfc00115 	stw	ra,4(sp)
    4428:	df000015 	stw	fp,0(sp)
    442c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4430:	d0a00517 	ldw	r2,-32748(gp)
    4434:	10000326 	beq	r2,zero,4444 <alt_get_errno+0x24>
    4438:	d0a00517 	ldw	r2,-32748(gp)
    443c:	103ee83a 	callr	r2
    4440:	00000106 	br	4448 <alt_get_errno+0x28>
    4444:	d0a18604 	addi	r2,gp,-31208
}
    4448:	e037883a 	mov	sp,fp
    444c:	dfc00117 	ldw	ra,4(sp)
    4450:	df000017 	ldw	fp,0(sp)
    4454:	dec00204 	addi	sp,sp,8
    4458:	f800283a 	ret

0000445c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    445c:	defffb04 	addi	sp,sp,-20
    4460:	dfc00415 	stw	ra,16(sp)
    4464:	df000315 	stw	fp,12(sp)
    4468:	df000304 	addi	fp,sp,12
    446c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4470:	e0bfff17 	ldw	r2,-4(fp)
    4474:	10000816 	blt	r2,zero,4498 <close+0x3c>
    4478:	01400304 	movi	r5,12
    447c:	e13fff17 	ldw	r4,-4(fp)
    4480:	0004ba00 	call	4ba0 <__mulsi3>
    4484:	1007883a 	mov	r3,r2
    4488:	00800034 	movhi	r2,0
    448c:	10930d04 	addi	r2,r2,19508
    4490:	1885883a 	add	r2,r3,r2
    4494:	00000106 	br	449c <close+0x40>
    4498:	0005883a 	mov	r2,zero
    449c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    44a0:	e0bffd17 	ldw	r2,-12(fp)
    44a4:	10001926 	beq	r2,zero,450c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    44a8:	e0bffd17 	ldw	r2,-12(fp)
    44ac:	10800017 	ldw	r2,0(r2)
    44b0:	10800417 	ldw	r2,16(r2)
    44b4:	10000626 	beq	r2,zero,44d0 <close+0x74>
    44b8:	e0bffd17 	ldw	r2,-12(fp)
    44bc:	10800017 	ldw	r2,0(r2)
    44c0:	10800417 	ldw	r2,16(r2)
    44c4:	e13ffd17 	ldw	r4,-12(fp)
    44c8:	103ee83a 	callr	r2
    44cc:	00000106 	br	44d4 <close+0x78>
    44d0:	0005883a 	mov	r2,zero
    44d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    44d8:	e13fff17 	ldw	r4,-4(fp)
    44dc:	00046600 	call	4660 <alt_release_fd>
    if (rval < 0)
    44e0:	e0bffe17 	ldw	r2,-8(fp)
    44e4:	1000070e 	bge	r2,zero,4504 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    44e8:	00044200 	call	4420 <alt_get_errno>
    44ec:	1007883a 	mov	r3,r2
    44f0:	e0bffe17 	ldw	r2,-8(fp)
    44f4:	0085c83a 	sub	r2,zero,r2
    44f8:	18800015 	stw	r2,0(r3)
      return -1;
    44fc:	00bfffc4 	movi	r2,-1
    4500:	00000706 	br	4520 <close+0xc4>
    }
    return 0;
    4504:	0005883a 	mov	r2,zero
    4508:	00000506 	br	4520 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    450c:	00044200 	call	4420 <alt_get_errno>
    4510:	1007883a 	mov	r3,r2
    4514:	00801444 	movi	r2,81
    4518:	18800015 	stw	r2,0(r3)
    return -1;
    451c:	00bfffc4 	movi	r2,-1
  }
}
    4520:	e037883a 	mov	sp,fp
    4524:	dfc00117 	ldw	ra,4(sp)
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00204 	addi	sp,sp,8
    4530:	f800283a 	ret

00004534 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4534:	deffff04 	addi	sp,sp,-4
    4538:	df000015 	stw	fp,0(sp)
    453c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4540:	0001883a 	nop
    4544:	e037883a 	mov	sp,fp
    4548:	df000017 	ldw	fp,0(sp)
    454c:	dec00104 	addi	sp,sp,4
    4550:	f800283a 	ret

00004554 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4554:	defffc04 	addi	sp,sp,-16
    4558:	df000315 	stw	fp,12(sp)
    455c:	df000304 	addi	fp,sp,12
    4560:	e13ffd15 	stw	r4,-12(fp)
    4564:	e17ffe15 	stw	r5,-8(fp)
    4568:	e1bfff15 	stw	r6,-4(fp)
  return len;
    456c:	e0bfff17 	ldw	r2,-4(fp)
}
    4570:	e037883a 	mov	sp,fp
    4574:	df000017 	ldw	fp,0(sp)
    4578:	dec00104 	addi	sp,sp,4
    457c:	f800283a 	ret

00004580 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4580:	defffd04 	addi	sp,sp,-12
    4584:	dfc00215 	stw	ra,8(sp)
    4588:	df000115 	stw	fp,4(sp)
    458c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4590:	00800034 	movhi	r2,0
    4594:	1092fe04 	addi	r2,r2,19448
    4598:	e0bfff15 	stw	r2,-4(fp)
    459c:	00000606 	br	45b8 <_do_ctors+0x38>
        (*ctor) (); 
    45a0:	e0bfff17 	ldw	r2,-4(fp)
    45a4:	10800017 	ldw	r2,0(r2)
    45a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    45ac:	e0bfff17 	ldw	r2,-4(fp)
    45b0:	10bfff04 	addi	r2,r2,-4
    45b4:	e0bfff15 	stw	r2,-4(fp)
    45b8:	e0ffff17 	ldw	r3,-4(fp)
    45bc:	00800034 	movhi	r2,0
    45c0:	1092ff04 	addi	r2,r2,19452
    45c4:	18bff62e 	bgeu	r3,r2,45a0 <_gp+0xffff73c8>
        (*ctor) (); 
}
    45c8:	0001883a 	nop
    45cc:	e037883a 	mov	sp,fp
    45d0:	dfc00117 	ldw	ra,4(sp)
    45d4:	df000017 	ldw	fp,0(sp)
    45d8:	dec00204 	addi	sp,sp,8
    45dc:	f800283a 	ret

000045e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    45e0:	defffd04 	addi	sp,sp,-12
    45e4:	dfc00215 	stw	ra,8(sp)
    45e8:	df000115 	stw	fp,4(sp)
    45ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    45f0:	00800034 	movhi	r2,0
    45f4:	1092fe04 	addi	r2,r2,19448
    45f8:	e0bfff15 	stw	r2,-4(fp)
    45fc:	00000606 	br	4618 <_do_dtors+0x38>
        (*dtor) (); 
    4600:	e0bfff17 	ldw	r2,-4(fp)
    4604:	10800017 	ldw	r2,0(r2)
    4608:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    460c:	e0bfff17 	ldw	r2,-4(fp)
    4610:	10bfff04 	addi	r2,r2,-4
    4614:	e0bfff15 	stw	r2,-4(fp)
    4618:	e0ffff17 	ldw	r3,-4(fp)
    461c:	00800034 	movhi	r2,0
    4620:	1092ff04 	addi	r2,r2,19452
    4624:	18bff62e 	bgeu	r3,r2,4600 <_gp+0xffff7428>
        (*dtor) (); 
}
    4628:	0001883a 	nop
    462c:	e037883a 	mov	sp,fp
    4630:	dfc00117 	ldw	ra,4(sp)
    4634:	df000017 	ldw	fp,0(sp)
    4638:	dec00204 	addi	sp,sp,8
    463c:	f800283a 	ret

00004640 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4640:	deffff04 	addi	sp,sp,-4
    4644:	df000015 	stw	fp,0(sp)
    4648:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    464c:	0001883a 	nop
    4650:	e037883a 	mov	sp,fp
    4654:	df000017 	ldw	fp,0(sp)
    4658:	dec00104 	addi	sp,sp,4
    465c:	f800283a 	ret

00004660 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4660:	defffc04 	addi	sp,sp,-16
    4664:	dfc00315 	stw	ra,12(sp)
    4668:	df000215 	stw	fp,8(sp)
    466c:	dc000115 	stw	r16,4(sp)
    4670:	df000204 	addi	fp,sp,8
    4674:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    4678:	e0bffe17 	ldw	r2,-8(fp)
    467c:	108000d0 	cmplti	r2,r2,3
    4680:	1000111e 	bne	r2,zero,46c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    4684:	04000034 	movhi	r16,0
    4688:	84130d04 	addi	r16,r16,19508
    468c:	e0bffe17 	ldw	r2,-8(fp)
    4690:	01400304 	movi	r5,12
    4694:	1009883a 	mov	r4,r2
    4698:	0004ba00 	call	4ba0 <__mulsi3>
    469c:	8085883a 	add	r2,r16,r2
    46a0:	10800204 	addi	r2,r2,8
    46a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    46a8:	04000034 	movhi	r16,0
    46ac:	84130d04 	addi	r16,r16,19508
    46b0:	e0bffe17 	ldw	r2,-8(fp)
    46b4:	01400304 	movi	r5,12
    46b8:	1009883a 	mov	r4,r2
    46bc:	0004ba00 	call	4ba0 <__mulsi3>
    46c0:	8085883a 	add	r2,r16,r2
    46c4:	10000015 	stw	zero,0(r2)
  }
}
    46c8:	0001883a 	nop
    46cc:	e6ffff04 	addi	sp,fp,-4
    46d0:	dfc00217 	ldw	ra,8(sp)
    46d4:	df000117 	ldw	fp,4(sp)
    46d8:	dc000017 	ldw	r16,0(sp)
    46dc:	dec00304 	addi	sp,sp,12
    46e0:	f800283a 	ret

000046e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    46e4:	deffff04 	addi	sp,sp,-4
    46e8:	df000015 	stw	fp,0(sp)
    46ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    46f0:	000170fa 	wrctl	ienable,zero
}
    46f4:	0001883a 	nop
    46f8:	e037883a 	mov	sp,fp
    46fc:	df000017 	ldw	fp,0(sp)
    4700:	dec00104 	addi	sp,sp,4
    4704:	f800283a 	ret

00004708 <atexit>:
    4708:	200b883a 	mov	r5,r4
    470c:	000f883a 	mov	r7,zero
    4710:	000d883a 	mov	r6,zero
    4714:	0009883a 	mov	r4,zero
    4718:	00047541 	jmpi	4754 <__register_exitproc>

0000471c <exit>:
    471c:	defffe04 	addi	sp,sp,-8
    4720:	000b883a 	mov	r5,zero
    4724:	dc000015 	stw	r16,0(sp)
    4728:	dfc00115 	stw	ra,4(sp)
    472c:	2021883a 	mov	r16,r4
    4730:	000486c0 	call	486c <__call_exitprocs>
    4734:	00800034 	movhi	r2,0
    4738:	10947c04 	addi	r2,r2,20976
    473c:	11000017 	ldw	r4,0(r2)
    4740:	20800f17 	ldw	r2,60(r4)
    4744:	10000126 	beq	r2,zero,474c <exit+0x30>
    4748:	103ee83a 	callr	r2
    474c:	8009883a 	mov	r4,r16
    4750:	0004bc80 	call	4bc8 <_exit>

00004754 <__register_exitproc>:
    4754:	defffa04 	addi	sp,sp,-24
    4758:	dc000315 	stw	r16,12(sp)
    475c:	04000034 	movhi	r16,0
    4760:	84147c04 	addi	r16,r16,20976
    4764:	80c00017 	ldw	r3,0(r16)
    4768:	dc400415 	stw	r17,16(sp)
    476c:	dfc00515 	stw	ra,20(sp)
    4770:	18805217 	ldw	r2,328(r3)
    4774:	2023883a 	mov	r17,r4
    4778:	10003726 	beq	r2,zero,4858 <__register_exitproc+0x104>
    477c:	10c00117 	ldw	r3,4(r2)
    4780:	010007c4 	movi	r4,31
    4784:	20c00e16 	blt	r4,r3,47c0 <__register_exitproc+0x6c>
    4788:	1a000044 	addi	r8,r3,1
    478c:	8800221e 	bne	r17,zero,4818 <__register_exitproc+0xc4>
    4790:	18c00084 	addi	r3,r3,2
    4794:	18c7883a 	add	r3,r3,r3
    4798:	18c7883a 	add	r3,r3,r3
    479c:	12000115 	stw	r8,4(r2)
    47a0:	10c7883a 	add	r3,r2,r3
    47a4:	19400015 	stw	r5,0(r3)
    47a8:	0005883a 	mov	r2,zero
    47ac:	dfc00517 	ldw	ra,20(sp)
    47b0:	dc400417 	ldw	r17,16(sp)
    47b4:	dc000317 	ldw	r16,12(sp)
    47b8:	dec00604 	addi	sp,sp,24
    47bc:	f800283a 	ret
    47c0:	00800034 	movhi	r2,0
    47c4:	10800004 	addi	r2,r2,0
    47c8:	10002626 	beq	r2,zero,4864 <__register_exitproc+0x110>
    47cc:	01006404 	movi	r4,400
    47d0:	d9400015 	stw	r5,0(sp)
    47d4:	d9800115 	stw	r6,4(sp)
    47d8:	d9c00215 	stw	r7,8(sp)
    47dc:	00000000 	call	0 <__alt_mem_onchip_mem-0x4000>
    47e0:	d9400017 	ldw	r5,0(sp)
    47e4:	d9800117 	ldw	r6,4(sp)
    47e8:	d9c00217 	ldw	r7,8(sp)
    47ec:	10001d26 	beq	r2,zero,4864 <__register_exitproc+0x110>
    47f0:	81000017 	ldw	r4,0(r16)
    47f4:	10000115 	stw	zero,4(r2)
    47f8:	02000044 	movi	r8,1
    47fc:	22405217 	ldw	r9,328(r4)
    4800:	0007883a 	mov	r3,zero
    4804:	12400015 	stw	r9,0(r2)
    4808:	20805215 	stw	r2,328(r4)
    480c:	10006215 	stw	zero,392(r2)
    4810:	10006315 	stw	zero,396(r2)
    4814:	883fde26 	beq	r17,zero,4790 <_gp+0xffff75b8>
    4818:	18c9883a 	add	r4,r3,r3
    481c:	2109883a 	add	r4,r4,r4
    4820:	1109883a 	add	r4,r2,r4
    4824:	21802215 	stw	r6,136(r4)
    4828:	01800044 	movi	r6,1
    482c:	12406217 	ldw	r9,392(r2)
    4830:	30cc983a 	sll	r6,r6,r3
    4834:	4992b03a 	or	r9,r9,r6
    4838:	12406215 	stw	r9,392(r2)
    483c:	21c04215 	stw	r7,264(r4)
    4840:	01000084 	movi	r4,2
    4844:	893fd21e 	bne	r17,r4,4790 <_gp+0xffff75b8>
    4848:	11006317 	ldw	r4,396(r2)
    484c:	218cb03a 	or	r6,r4,r6
    4850:	11806315 	stw	r6,396(r2)
    4854:	003fce06 	br	4790 <_gp+0xffff75b8>
    4858:	18805304 	addi	r2,r3,332
    485c:	18805215 	stw	r2,328(r3)
    4860:	003fc606 	br	477c <_gp+0xffff75a4>
    4864:	00bfffc4 	movi	r2,-1
    4868:	003fd006 	br	47ac <_gp+0xffff75d4>

0000486c <__call_exitprocs>:
    486c:	defff504 	addi	sp,sp,-44
    4870:	df000915 	stw	fp,36(sp)
    4874:	dd400615 	stw	r21,24(sp)
    4878:	dc800315 	stw	r18,12(sp)
    487c:	dfc00a15 	stw	ra,40(sp)
    4880:	ddc00815 	stw	r23,32(sp)
    4884:	dd800715 	stw	r22,28(sp)
    4888:	dd000515 	stw	r20,20(sp)
    488c:	dcc00415 	stw	r19,16(sp)
    4890:	dc400215 	stw	r17,8(sp)
    4894:	dc000115 	stw	r16,4(sp)
    4898:	d9000015 	stw	r4,0(sp)
    489c:	2839883a 	mov	fp,r5
    48a0:	04800044 	movi	r18,1
    48a4:	057fffc4 	movi	r21,-1
    48a8:	00800034 	movhi	r2,0
    48ac:	10947c04 	addi	r2,r2,20976
    48b0:	12000017 	ldw	r8,0(r2)
    48b4:	45005217 	ldw	r20,328(r8)
    48b8:	44c05204 	addi	r19,r8,328
    48bc:	a0001c26 	beq	r20,zero,4930 <__call_exitprocs+0xc4>
    48c0:	a0800117 	ldw	r2,4(r20)
    48c4:	15ffffc4 	addi	r23,r2,-1
    48c8:	b8000d16 	blt	r23,zero,4900 <__call_exitprocs+0x94>
    48cc:	14000044 	addi	r16,r2,1
    48d0:	8421883a 	add	r16,r16,r16
    48d4:	8421883a 	add	r16,r16,r16
    48d8:	84402004 	addi	r17,r16,128
    48dc:	a463883a 	add	r17,r20,r17
    48e0:	a421883a 	add	r16,r20,r16
    48e4:	e0001e26 	beq	fp,zero,4960 <__call_exitprocs+0xf4>
    48e8:	80804017 	ldw	r2,256(r16)
    48ec:	e0801c26 	beq	fp,r2,4960 <__call_exitprocs+0xf4>
    48f0:	bdffffc4 	addi	r23,r23,-1
    48f4:	843fff04 	addi	r16,r16,-4
    48f8:	8c7fff04 	addi	r17,r17,-4
    48fc:	bd7ff91e 	bne	r23,r21,48e4 <_gp+0xffff770c>
    4900:	00800034 	movhi	r2,0
    4904:	10800004 	addi	r2,r2,0
    4908:	10000926 	beq	r2,zero,4930 <__call_exitprocs+0xc4>
    490c:	a0800117 	ldw	r2,4(r20)
    4910:	1000301e 	bne	r2,zero,49d4 <__call_exitprocs+0x168>
    4914:	a0800017 	ldw	r2,0(r20)
    4918:	10003226 	beq	r2,zero,49e4 <__call_exitprocs+0x178>
    491c:	a009883a 	mov	r4,r20
    4920:	98800015 	stw	r2,0(r19)
    4924:	00000000 	call	0 <__alt_mem_onchip_mem-0x4000>
    4928:	9d000017 	ldw	r20,0(r19)
    492c:	a03fe41e 	bne	r20,zero,48c0 <_gp+0xffff76e8>
    4930:	dfc00a17 	ldw	ra,40(sp)
    4934:	df000917 	ldw	fp,36(sp)
    4938:	ddc00817 	ldw	r23,32(sp)
    493c:	dd800717 	ldw	r22,28(sp)
    4940:	dd400617 	ldw	r21,24(sp)
    4944:	dd000517 	ldw	r20,20(sp)
    4948:	dcc00417 	ldw	r19,16(sp)
    494c:	dc800317 	ldw	r18,12(sp)
    4950:	dc400217 	ldw	r17,8(sp)
    4954:	dc000117 	ldw	r16,4(sp)
    4958:	dec00b04 	addi	sp,sp,44
    495c:	f800283a 	ret
    4960:	a0800117 	ldw	r2,4(r20)
    4964:	80c00017 	ldw	r3,0(r16)
    4968:	10bfffc4 	addi	r2,r2,-1
    496c:	15c01426 	beq	r2,r23,49c0 <__call_exitprocs+0x154>
    4970:	80000015 	stw	zero,0(r16)
    4974:	183fde26 	beq	r3,zero,48f0 <_gp+0xffff7718>
    4978:	95c8983a 	sll	r4,r18,r23
    497c:	a0806217 	ldw	r2,392(r20)
    4980:	a5800117 	ldw	r22,4(r20)
    4984:	2084703a 	and	r2,r4,r2
    4988:	10000b26 	beq	r2,zero,49b8 <__call_exitprocs+0x14c>
    498c:	a0806317 	ldw	r2,396(r20)
    4990:	2088703a 	and	r4,r4,r2
    4994:	20000c1e 	bne	r4,zero,49c8 <__call_exitprocs+0x15c>
    4998:	89400017 	ldw	r5,0(r17)
    499c:	d9000017 	ldw	r4,0(sp)
    49a0:	183ee83a 	callr	r3
    49a4:	a0800117 	ldw	r2,4(r20)
    49a8:	15bfbf1e 	bne	r2,r22,48a8 <_gp+0xffff76d0>
    49ac:	98800017 	ldw	r2,0(r19)
    49b0:	153fcf26 	beq	r2,r20,48f0 <_gp+0xffff7718>
    49b4:	003fbc06 	br	48a8 <_gp+0xffff76d0>
    49b8:	183ee83a 	callr	r3
    49bc:	003ff906 	br	49a4 <_gp+0xffff77cc>
    49c0:	a5c00115 	stw	r23,4(r20)
    49c4:	003feb06 	br	4974 <_gp+0xffff779c>
    49c8:	89000017 	ldw	r4,0(r17)
    49cc:	183ee83a 	callr	r3
    49d0:	003ff406 	br	49a4 <_gp+0xffff77cc>
    49d4:	a0800017 	ldw	r2,0(r20)
    49d8:	a027883a 	mov	r19,r20
    49dc:	1029883a 	mov	r20,r2
    49e0:	003fb606 	br	48bc <_gp+0xffff76e4>
    49e4:	0005883a 	mov	r2,zero
    49e8:	003ffb06 	br	49d8 <_gp+0xffff7800>

000049ec <__divsi3>:
    49ec:	20001b16 	blt	r4,zero,4a5c <__divsi3+0x70>
    49f0:	000f883a 	mov	r7,zero
    49f4:	28001616 	blt	r5,zero,4a50 <__divsi3+0x64>
    49f8:	200d883a 	mov	r6,r4
    49fc:	29001a2e 	bgeu	r5,r4,4a68 <__divsi3+0x7c>
    4a00:	00800804 	movi	r2,32
    4a04:	00c00044 	movi	r3,1
    4a08:	00000106 	br	4a10 <__divsi3+0x24>
    4a0c:	10000d26 	beq	r2,zero,4a44 <__divsi3+0x58>
    4a10:	294b883a 	add	r5,r5,r5
    4a14:	10bfffc4 	addi	r2,r2,-1
    4a18:	18c7883a 	add	r3,r3,r3
    4a1c:	293ffb36 	bltu	r5,r4,4a0c <_gp+0xffff7834>
    4a20:	0005883a 	mov	r2,zero
    4a24:	18000726 	beq	r3,zero,4a44 <__divsi3+0x58>
    4a28:	0005883a 	mov	r2,zero
    4a2c:	31400236 	bltu	r6,r5,4a38 <__divsi3+0x4c>
    4a30:	314dc83a 	sub	r6,r6,r5
    4a34:	10c4b03a 	or	r2,r2,r3
    4a38:	1806d07a 	srli	r3,r3,1
    4a3c:	280ad07a 	srli	r5,r5,1
    4a40:	183ffa1e 	bne	r3,zero,4a2c <_gp+0xffff7854>
    4a44:	38000126 	beq	r7,zero,4a4c <__divsi3+0x60>
    4a48:	0085c83a 	sub	r2,zero,r2
    4a4c:	f800283a 	ret
    4a50:	014bc83a 	sub	r5,zero,r5
    4a54:	39c0005c 	xori	r7,r7,1
    4a58:	003fe706 	br	49f8 <_gp+0xffff7820>
    4a5c:	0109c83a 	sub	r4,zero,r4
    4a60:	01c00044 	movi	r7,1
    4a64:	003fe306 	br	49f4 <_gp+0xffff781c>
    4a68:	00c00044 	movi	r3,1
    4a6c:	003fee06 	br	4a28 <_gp+0xffff7850>

00004a70 <__modsi3>:
    4a70:	20001716 	blt	r4,zero,4ad0 <__modsi3+0x60>
    4a74:	000f883a 	mov	r7,zero
    4a78:	2005883a 	mov	r2,r4
    4a7c:	28001216 	blt	r5,zero,4ac8 <__modsi3+0x58>
    4a80:	2900162e 	bgeu	r5,r4,4adc <__modsi3+0x6c>
    4a84:	01800804 	movi	r6,32
    4a88:	00c00044 	movi	r3,1
    4a8c:	00000106 	br	4a94 <__modsi3+0x24>
    4a90:	30000a26 	beq	r6,zero,4abc <__modsi3+0x4c>
    4a94:	294b883a 	add	r5,r5,r5
    4a98:	31bfffc4 	addi	r6,r6,-1
    4a9c:	18c7883a 	add	r3,r3,r3
    4aa0:	293ffb36 	bltu	r5,r4,4a90 <_gp+0xffff78b8>
    4aa4:	18000526 	beq	r3,zero,4abc <__modsi3+0x4c>
    4aa8:	1806d07a 	srli	r3,r3,1
    4aac:	11400136 	bltu	r2,r5,4ab4 <__modsi3+0x44>
    4ab0:	1145c83a 	sub	r2,r2,r5
    4ab4:	280ad07a 	srli	r5,r5,1
    4ab8:	183ffb1e 	bne	r3,zero,4aa8 <_gp+0xffff78d0>
    4abc:	38000126 	beq	r7,zero,4ac4 <__modsi3+0x54>
    4ac0:	0085c83a 	sub	r2,zero,r2
    4ac4:	f800283a 	ret
    4ac8:	014bc83a 	sub	r5,zero,r5
    4acc:	003fec06 	br	4a80 <_gp+0xffff78a8>
    4ad0:	0109c83a 	sub	r4,zero,r4
    4ad4:	01c00044 	movi	r7,1
    4ad8:	003fe706 	br	4a78 <_gp+0xffff78a0>
    4adc:	00c00044 	movi	r3,1
    4ae0:	003ff106 	br	4aa8 <_gp+0xffff78d0>

00004ae4 <__udivsi3>:
    4ae4:	200d883a 	mov	r6,r4
    4ae8:	2900152e 	bgeu	r5,r4,4b40 <__udivsi3+0x5c>
    4aec:	28001416 	blt	r5,zero,4b40 <__udivsi3+0x5c>
    4af0:	00800804 	movi	r2,32
    4af4:	00c00044 	movi	r3,1
    4af8:	00000206 	br	4b04 <__udivsi3+0x20>
    4afc:	10000e26 	beq	r2,zero,4b38 <__udivsi3+0x54>
    4b00:	28000516 	blt	r5,zero,4b18 <__udivsi3+0x34>
    4b04:	294b883a 	add	r5,r5,r5
    4b08:	10bfffc4 	addi	r2,r2,-1
    4b0c:	18c7883a 	add	r3,r3,r3
    4b10:	293ffa36 	bltu	r5,r4,4afc <_gp+0xffff7924>
    4b14:	18000826 	beq	r3,zero,4b38 <__udivsi3+0x54>
    4b18:	0005883a 	mov	r2,zero
    4b1c:	31400236 	bltu	r6,r5,4b28 <__udivsi3+0x44>
    4b20:	314dc83a 	sub	r6,r6,r5
    4b24:	10c4b03a 	or	r2,r2,r3
    4b28:	1806d07a 	srli	r3,r3,1
    4b2c:	280ad07a 	srli	r5,r5,1
    4b30:	183ffa1e 	bne	r3,zero,4b1c <_gp+0xffff7944>
    4b34:	f800283a 	ret
    4b38:	0005883a 	mov	r2,zero
    4b3c:	f800283a 	ret
    4b40:	00c00044 	movi	r3,1
    4b44:	003ff406 	br	4b18 <_gp+0xffff7940>

00004b48 <__umodsi3>:
    4b48:	2005883a 	mov	r2,r4
    4b4c:	2900122e 	bgeu	r5,r4,4b98 <__umodsi3+0x50>
    4b50:	28001116 	blt	r5,zero,4b98 <__umodsi3+0x50>
    4b54:	01800804 	movi	r6,32
    4b58:	00c00044 	movi	r3,1
    4b5c:	00000206 	br	4b68 <__umodsi3+0x20>
    4b60:	30000c26 	beq	r6,zero,4b94 <__umodsi3+0x4c>
    4b64:	28000516 	blt	r5,zero,4b7c <__umodsi3+0x34>
    4b68:	294b883a 	add	r5,r5,r5
    4b6c:	31bfffc4 	addi	r6,r6,-1
    4b70:	18c7883a 	add	r3,r3,r3
    4b74:	293ffa36 	bltu	r5,r4,4b60 <_gp+0xffff7988>
    4b78:	18000626 	beq	r3,zero,4b94 <__umodsi3+0x4c>
    4b7c:	1806d07a 	srli	r3,r3,1
    4b80:	11400136 	bltu	r2,r5,4b88 <__umodsi3+0x40>
    4b84:	1145c83a 	sub	r2,r2,r5
    4b88:	280ad07a 	srli	r5,r5,1
    4b8c:	183ffb1e 	bne	r3,zero,4b7c <_gp+0xffff79a4>
    4b90:	f800283a 	ret
    4b94:	f800283a 	ret
    4b98:	00c00044 	movi	r3,1
    4b9c:	003ff706 	br	4b7c <_gp+0xffff79a4>

00004ba0 <__mulsi3>:
    4ba0:	0005883a 	mov	r2,zero
    4ba4:	20000726 	beq	r4,zero,4bc4 <__mulsi3+0x24>
    4ba8:	20c0004c 	andi	r3,r4,1
    4bac:	2008d07a 	srli	r4,r4,1
    4bb0:	18000126 	beq	r3,zero,4bb8 <__mulsi3+0x18>
    4bb4:	1145883a 	add	r2,r2,r5
    4bb8:	294b883a 	add	r5,r5,r5
    4bbc:	203ffa1e 	bne	r4,zero,4ba8 <_gp+0xffff79d0>
    4bc0:	f800283a 	ret
    4bc4:	f800283a 	ret

00004bc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4bc8:	defffd04 	addi	sp,sp,-12
    4bcc:	df000215 	stw	fp,8(sp)
    4bd0:	df000204 	addi	fp,sp,8
    4bd4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4bd8:	0001883a 	nop
    4bdc:	e0bfff17 	ldw	r2,-4(fp)
    4be0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4be4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4be8:	10000226 	beq	r2,zero,4bf4 <_exit+0x2c>
    ALT_SIM_FAIL();
    4bec:	002af070 	cmpltui	zero,zero,43969
    4bf0:	00000106 	br	4bf8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4bf4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4bf8:	003fff06 	br	4bf8 <_gp+0xffff7a20>
